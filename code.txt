APPENDIX
Software:
#!/usr/bin/python
import time
import RPi.GPIO as GPIO
import pio
import Ports
#import serial
GPIO.setmode(GPIO.BOARD)
GPIO.setwarnings(False)
pio.uart=Ports.UART () # Define serial port
'''
define pin for lcd
'''
# Timing constants
E_PULSE = 0.0005
E_DELAY = 0.0005
# Define GPIO to LCD mapping
LCD_RS = 7
LCD_E  = 11
LCD_D4 = 12
LCD_D5 = 13
LCD_D6 = 15
LCD_D7 = 16
alcohol_Sensor = 18
vibration_sensor = 33
GPIO.setup(LCD_E, GPIO.OUT)  # E
GPIO.setup(LCD_RS, GPIO.OUT) # RS
GPIO.setup(LCD_D4, GPIO.OUT) # DB4
GPIO.setup(LCD_D5, GPIO.OUT) # DB5
GPIO.setup(LCD_D6, GPIO.OUT) # DB6
GPIO.setup(LCD_D7, GPIO.OUT) 
GPIO.setup(alcohol_Sensor, GPIO.IN)  
GPIO.setup(vibration_sensor, GPIO.IN) 
# Define some device constants
LCD_WIDTH = 16    # Maximum characters per line
LCD_CHR = True
LCD_CMD = False
LCD_LINE_1 = 0x80 # LCD RAM address for the 1st line
LCD_LINE_2 = 0xC0 # LCD RAM address for the 2nd line
'''
Function Name :lcd_init()
Function Description : this function is used to initialized lcd by sending the different commands
'''
def lcd_init():
  # Initialise display
  lcd_byte(0x33,LCD_CMD) # 110011 Initialise
  lcd_byte(0x32,LCD_CMD) # 110010 Initialise
  lcd_byte(0x06,LCD_CMD) # 000110 Cursor move direction
  lcd_byte(0x0C,LCD_CMD) # 001100 Display On,Cursor Off, Blink Off
  lcd_byte(0x28,LCD_CMD) # 101000 Data length, number of lines, font size
  lcd_byte(0x01,LCD_CMD) # 000001 Clear display
  time.sleep(E_DELAY)
'''
Function Name :lcd_byte(bits ,mode)
Fuction Name :the main purpose of this function to convert the byte data into bit and send to lcd port
'''
def lcd_byte(bits, mode):
  # Send byte to data pins
  # bits = data
  # mode = True  for character
  #        False for command
  GPIO.output(LCD_RS, mode) # RS
  # High bits
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&0x10==0x10:
    GPIO.output(LCD_D4, True)
  if bits&0x20==0x20:
    GPIO.output(LCD_D5, True)
  if bits&0x40==0x40:
    GPIO.output(LCD_D6, True)
  if bits&0x80==0x80:
    GPIO.output(LCD_D7, True)
 
  # Toggle 'Enable' pin
  lcd_toggle_enable()

  # Low bits
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&0x01==0x01:
    GPIO.output(LCD_D4, True)
  if bits&0x02==0x02:
    GPIO.output(LCD_D5, True)
  if bits&0x04==0x04:
    GPIO.output(LCD_D6, True)
  if bits&0x08==0x08:
    GPIO.output(LCD_D7, True)
 
  # Toggle 'Enable' pin
  lcd_toggle_enable()
'''
Function Name : lcd_toggle_enable()
Function Description:basically this is used to toggle Enable pin
'''
def lcd_toggle_enable():
  # Toggle enable
  time.sleep(E_DELAY)
  GPIO.output(LCD_E, True)
  time.sleep(E_PULSE)
  GPIO.output(LCD_E, False)
  time.sleep(E_DELAY)
'''
Function Name :lcd_string(message,line)
Function  Description :print the data on lcd 
'''
def lcd_string(message,line):
  # Send string to display
 
  message = message.ljust(LCD_WIDTH," ")
 
  lcd_byte(line, LCD_CMD)
 
  for i in range(LCD_WIDTH):
    lcd_byte(ord(message[i]),LCD_CHR)

lcd_init()
lcd_string("welcome ",LCD_LINE_1)
time.sleep(0.1)
lcd_byte(0x01,LCD_CMD) # 000001 Clear display
lcd_string("Smart Car System",LCD_LINE_1)
time.sleep(0.1)
while 1:
    # Print out results
    alcohol_data = GPIO.input(alcohol_Sensor)
    vibration_data = GPIO.input(vibration_sensor)
    
    if vibration_data == True:
        if alcohol_data == True:
            lcd_byte(0x01, LCD_CMD)  # 000001 Clear display
            lcd_string("accident &", LCD_LINE_1)
            lcd_string(" co detected", LCD_LINE_2)
            pio.uart.println("accident and carbonmonoxide Detected")
            pio.uart.println("AT+CMGS=\"+919922512017\"")
            pio.uart.println("location:Latitude :12.9211")
            pio.uart.println(" Longitude :77.6134\r")
        else:
            lcd_byte(0x01, LCD_CMD)  # 000001 Clear display
            lcd_string("Accident", LCD_LINE_1)
            lcd_string("Detected", LCD_LINE_2)
            pio.uart.println("accident Detected")
            pio.uart.println("AT+CMGS=\"+919922512017\"")
            pio.uart.println("location:Latitude :12.9211")
            pio.uart.println("         Longitude :77.6134\r")
    elif alcohol_data == True:
        lcd_byte(0x01, LCD_CMD)  # 000001 Clear display
        lcd_string("carbonmonoxide", LCD_LINE_1)
        lcd_string("detected", LCD_LINE_2)
        pio.uart.println("carbonmonoxide detected")
        pio.uart.println("AT+CMGS=\"+919922512017\"")
        pio.uart.println("location:Latitude :12.9211")
        pio.uart.println("         Longitude :77.6134\r")
    else:
        lcd_byte(0x01, LCD_CMD)  # 000001 Clear display
        lcd_string("No Accident", LCD_LINE_1)
        lcd_string("Detected", LCD_LINE_2)
Hardware:
import smbus
import time
import RPi.GPIO as GPIO

ADXL345_ADDRESS = 0x53
VIBRATION_SENSOR_PIN = 17  # GPIO pin for the vibration sensor

bus = smbus.SMBus(1)

# Set ADXL345 in measuring mode
bus.write_byte_data(ADXL345_ADDRESS, 0x2D, 8)  # Enable measurement
time.sleep(0.01)

# Set up GPIO for the vibration sensor
GPIO.setmode(GPIO.BCM)
GPIO.setup(VIBRATION_SENSOR_PIN, GPIO.IN)

try:
    while True:
        # Read accelerometer data
        bus.write_byte_data(ADXL345_ADDRESS, 0x32, 0x80 | 0x40 | 0x20 | 0x08)  # Set to read mode
        data = bus.read_i2c_block_data(ADXL345_ADDRESS, 0x32, 6)

        xa = (data[1] << 8) | data[0]
        ya = (data[3] << 8) | data[2]
        za = (data[5] << 8) | data[4]

        xa = xa if xa < 0x8000 else xa - 0x10000
        ya = ya if ya < 0x8000 else ya - 0x10000
        za = za if za < 0x8000 else za - 0x10000

        xa /= 256.0
        ya /= 256.0
        za /= 256.0

        print(f"Xa= {xa:.2f}   Ya= {ya:.2f}   Za= {za:.2f}")

        # Check for significant change in x-axis values
        if (abs(xa) > 0.45 or abs(ya) > 0.45):
            # Check vibration from the sensor
            if GPIO.input(VIBRATION_SENSOR_PIN):
                print("Accident Detected!")
                break
            else:
                print("No accident detected.")
                continue

        else:
            print("No accident detected.")
            continue  # Continue to the next iteration

        time.sleep(1)

except KeyboardInterrupt:
    pass
finally:
    bus.close()
    GPIO.cleanup()  # Cleanup GPIO settings before exiting
